# @property
    # def _leave_remaining(self):
    # """
    # Return amount of leave remaining in the current period
    # """
    # periods = self.get_periods(self.start_date, date.today())
    # days_remaining = 18
    # for period in periods:
    #     days_remaining -= self.leave_taken(period[0], period[1])
    #     if days_remaining > 5:
    #         days_remaining = 23
    #     else:
    #         days_remaining += 18
    # return days_remaining

    # @property
    # def _current_period(self):
    #     """
    #     Return the start and end date of the latest working period
    #     """
    #     periods = self.get_periods(self.start_date, date.today())
    #     return periods[-1]

    # @property
    # def get_periods(self, start_date, end_date):
    #     """
    #     Return a list of 12 month working periods within a start and end date
    #     Each returned period in the list is a tuple and consists of 2 values :
    #     the start date and end date of the period respectively
    #     """
    #     if relativedelta(end_date, start_date).years <= 1:
    #         return [(start_date, end_date)]
    #     elif relativedelta(end_date, start_date).years > 1:
    #         end_of_period = start_date + relativedelta(years=+1, days=-1)
    #         periods = [(start_date, end_of_period)]
    #         while relativedelta(end_date, end_of_period).years >= 1:
    #             start_of_period = end_of_period + relativedelta(days=1)
    #             end_of_period += relativedelta(years=+1, days=-1)
    #             periods.append((start_of_period, end_of_period))
    #         periods.append((end_of_period + relativedelta(days=1), end_date))
    #         return periods
    #     else:
    #         raise ValueError(
    #             """start_date must be before end_date and both
    #         must be datetime objects"""
    #         )

    # def leave_taken(self, start_date, end_date):
    #     """
    #     Return the number of days of leave taken between the supplied dates
    #     """
    #     leave_list = Leave.objects.filter(
    #         start_date__gte=start_date, end_date__lte=end_date
    #     )
    #     days_taken = 0
    #     for leave_object in leave_list:
    #         # This is a naive solution that assumes that leave dates will not
    #         # cross working period boundaries. For simplicity we just use the
    #         # Leave model's days_taken property
    #         if leave_object.status == "approved":
    #             days_taken += leave_object.working_days_in_leave_period
    #     return days_taken
